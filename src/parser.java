
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;
import Tree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\007\002\000\002\010\002\000\002\002" +
    "\006\000\002\002\004\000\002\002\002\000\002\011\002" +
    "\000\002\012\002\000\002\013\002\000\002\003\011\000" +
    "\002\014\002\000\002\004\005\000\002\005\003\000\002" +
    "\005\003\000\002\015\002\000\002\005\006\000\002\016" +
    "\002\000\002\017\002\000\002\020\002\000\002\006\010" +
    "\000\002\021\002\000\002\022\002\000\002\023\002\000" +
    "\002\006\010\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\012\002\ufffd\005\001\010\001\013\001\001" +
    "\002\000\010\005\ufffc\010\ufffc\013\ufffc\001\002\000\004" +
    "\002\006\001\002\000\004\002\ufffe\001\002\000\012\002" +
    "\000\005\000\010\000\013\000\001\002\000\010\005\014" +
    "\010\013\013\011\001\002\000\014\004\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\001\002\000\004\007\ufffb\001\002" +
    "\000\014\004\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\001" +
    "\002\000\010\005\014\010\013\013\011\001\002\000\014" +
    "\004\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\001\002\000" +
    "\014\004\uffea\006\uffea\007\uffea\011\ufff2\012\uffee\001\002" +
    "\000\004\012\027\001\002\000\004\011\022\001\002\000" +
    "\010\004\ufff7\006\ufff7\007\ufff7\001\002\000\010\005\ufff1" +
    "\010\ufff1\013\ufff1\001\002\000\010\005\014\010\013\013" +
    "\011\001\002\000\014\004\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\001\002\000\014\004\uffea\006\uffea\007\uffea\011" +
    "\ufff2\012\uffee\001\002\000\010\004\uffef\006\uffef\007\uffef" +
    "\001\002\000\010\005\uffed\010\uffed\013\uffed\001\002\000" +
    "\010\005\014\010\013\013\011\001\002\000\014\004\uffec" +
    "\006\uffec\007\uffec\011\uffec\012\uffec\001\002\000\014\004" +
    "\uffea\006\uffea\007\uffea\011\ufff2\012\uffee\001\002\000\010" +
    "\004\uffeb\006\uffeb\007\uffeb\001\002\000\004\006\ufff4\001" +
    "\002\000\004\006\036\001\002\000\014\004\ufff3\006\ufff3" +
    "\007\ufff3\011\ufff3\012\ufff3\001\002\000\004\007\040\001" +
    "\002\000\010\005\014\010\013\013\011\001\002\000\004" +
    "\004\ufffa\001\002\000\004\004\043\001\002\000\012\002" +
    "\ufff9\005\ufff9\010\ufff9\013\ufff9\001\002\000\012\002\ufffd" +
    "\005\001\010\001\013\001\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\006\002\004\007\003\001\001\000\006\003" +
    "\006\011\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\043\001\001\000\006\004\011\005\014\001" +
    "\001\000\002\001\001\000\004\012\036\001\001\000\002" +
    "\001\001\000\006\004\033\005\014\001\001\000\004\014" +
    "\015\001\001\000\010\006\020\016\017\021\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\022\001\001\000\004\005\023\001\001\000\004" +
    "\020\024\001\001\000\010\006\025\016\017\021\016\001" +
    "\001\000\002\001\001\000\004\022\027\001\001\000\004" +
    "\005\030\001\001\000\004\023\031\001\001\000\010\006" +
    "\032\016\017\021\016\001\001\000\002\001\001\000\004" +
    "\015\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\040\005\014\001\001\000\004" +
    "\013\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\044\007\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Hashtable<String, Integer> variables
        = new Hashtable<String, Integer>();

    public ExpressionNode toExpressionNode(ExpressionNode left, TermPNode right) {

        if(right == null || right.expression == null)
            return left;

        BinaryOperationNode node = right.operator == "+" ? new AdditionNode() : new SubstractionNode();
        node.left = left;
        node.right = right.expression;
        return node;
    }

    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              EquationListNode RESULT =null;
 RESULT = new EquationListNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              EquationListNode RESULT =(EquationListNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecuacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecuacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EquationNode ecuacion = (EquationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.addNode(ecuacion); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ECUACIONES ::= NT$0 ECUACION NT$1 ECUACIONES 
            {
              EquationListNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (EquationListNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecuacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ecuacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EquationNode ecuacion = (EquationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EquationListNode lista = (EquationListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.add(lista); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECUACIONES",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= ECUACIONES EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EquationListNode start_val = (EquationListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ECUACIONES ::= 
            {
              EquationListNode RESULT =null;
		 RESULT = new EquationListNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECUACIONES",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              EquationNode RESULT =null;
 RESULT = new EquationNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              EquationNode RESULT =(EquationNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.left = left; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$4 ::= 
            {
              EquationNode RESULT =(EquationNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.right = right;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ECUACION ::= NT$2 EXPRESSION NT$3 EQUALS EXPRESSION NT$4 SEMI 
            {
              EquationNode RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (EquationNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECUACION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$5 ::= 
            {
              ExpressionNode RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode term = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = term; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESSION ::= TERM NT$5 TERMP 
            {
              ExpressionNode RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode term = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermPNode tp = (TermPNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = toExpressionNode(term, tp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TERM ::= NUMBER 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TERM ::= ID 
            {
              ExpressionNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableNode(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = e;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TERM ::= LPAREN EXPRESSION NT$6 RPAREN 
            {
              ExpressionNode RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              TermPNode RESULT =null;
 RESULT = new TermPNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              TermPNode RESULT =(TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.operator = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$9 ::= 
            {
              TermPNode RESULT =(TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.expression = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TERMP ::= NT$7 PLUS NT$8 TERM NT$9 TERMP 
            {
              TermPNode RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermPNode tp = (TermPNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.expression =  toExpressionNode(t, tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$10 ::= 
            {
              TermPNode RESULT =null;
 RESULT = new TermPNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$11 ::= 
            {
              TermPNode RESULT =(TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.operator = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$12 ::= 
            {
              TermPNode RESULT =(TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT.expression = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TERMP ::= NT$10 MINUS NT$11 TERM NT$12 TERMP 
            {
              TermPNode RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (TermPNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermPNode tp = (TermPNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.expression =  toExpressionNode(t, tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TERMP ::= 
            {
              TermPNode RESULT =null;
		 RESULT = new TermPNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
